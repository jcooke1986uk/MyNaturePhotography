{"version":3,"sources":["Header.js","InstaGrid.js","MainContent.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","target","rel","InstaGrid","_ref","classes","media","account","status","react","Grid","container","spacing","wrapper","map","_ref2","displayImage","id","postLink","accessibilityCaption","item","xs","sm","md","key","ButtonBase","concat","src","alt","image","defaultProps","undefined","compose","withInstagramFeed","withStyles","width","height","MainContent","src_InstaGrid","numberOfMediaElements","Footer","App","src_Header","src_MainContent","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAwCeA,MArCf,WACE,OACIC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAb,oBAEFH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KACEE,KAAK,wCACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,UAJZ,aAQAH,EAAAC,EAAAC,cAAA,KACEE,KAAK,kCACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,UAJZ,UAQAH,EAAAC,EAAAC,cAAA,KACEE,KAAK,oDACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,UAJZ,kFCEJI,EAAY,SAAAC,GAA+C,IAA5CC,EAA4CD,EAA5CC,QAASC,EAAmCF,EAAnCE,MAAOC,EAA4BH,EAA5BG,QAASC,EAAmBJ,EAAnBI,OAC5C,OACEC,EAAA,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGb,UAAWM,EAAQQ,SAC5CP,GACY,cAAXE,GACAF,EAAMQ,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,aAAcC,EAAjBF,EAAiBE,GAAIC,EAArBH,EAAqBG,SAAUC,EAA/BJ,EAA+BI,qBAA/B,OACRV,EAAA,cAACC,EAAA,EAAD,CAAMU,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,IAAKP,GAAMD,GAC1CP,EAAA,cAACgB,EAAA,EAAD,CACEzB,KAAMkB,GAAQ,6BAAAQ,OAAiCnB,EAAjC,MAEdE,EAAA,qBACEkB,IAAKX,EACLY,IAAKT,GAAwB,oBAC7BpB,UAAWM,EAAQwB,YAKjB,YAAXrB,GAAwBC,EAAA,qCACb,WAAXD,GAAuBC,EAAA,iDAK9BN,EAAU2B,aAAe,CACvBxB,WAAOyB,GAGMC,UACbC,IACAC,YAlDa,iBAAO,CACpBrB,QAAS,GACTgB,MAAO,CACLM,MAAO,OACPC,OAAQ,WA4CGJ,CAGb7B,GC5CakC,MAZf,WACE,OACIzC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,6BAGAF,EAAAC,EAAAC,cAAA,iUACAF,EAAAC,EAAAC,cAACwC,EAAD,CAAW/B,QAAQ,aAAagC,sBAAuB,cCgChDC,MAxCf,WACE,OACI5C,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KACEE,KAAK,wCACLC,OAAO,SACPC,IAAI,uBAHN,aAOAN,EAAAC,EAAAC,cAAA,KACEE,KAAK,kCACLC,OAAO,SACPC,IAAI,uBAHN,UAOAN,EAAAC,EAAAC,cAAA,KACEE,KAAK,oDACLC,OAAO,SACPC,IAAI,uBAHN,aAQFN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KACIE,KAAK,uDACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,UAJd,kCCbG0C,MAZf,WACE,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAC4C,EAAD,MAEA9C,EAAAC,EAAAC,cAAC6C,EAAD,MAEA/C,EAAAC,EAAAC,cAAC8C,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dbd45257.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n      <header>\r\n        <div>\r\n          <p className=\"name\">Jenny Cooke</p>\r\n          <p className=\"tagline\">Styling the web</p>\r\n        </div>\r\n        <div>\r\n          <a\r\n            href=\"https://www.instagram.com/jcooke1986/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"button\"\r\n          >\r\n            Instagram\r\n          </a>\r\n          <a\r\n            href=\"https://github.com/jcooke1986uk\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"button\"\r\n          >\r\n              Github\r\n          </a>\r\n          <a \r\n            href=\"https://www.linkedin.com/in/jenny-cooke-6ba13058/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"button\"\r\n          >\r\n            LinkedIn\r\n          </a>\r\n        </div>\r\n      </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","// @flow\r\n\r\nimport * as React from 'react';\r\nimport withInstagramFeed from 'origen-react-instagram-feed';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport compose from 'recompose/compose';\r\n\r\nconst styles = () => ({\r\n  wrapper: {},\r\n  image: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n});\r\n\r\nexport type Props = {\r\n  media?: Array<{\r\n    displayImage: string,\r\n    id?: string,\r\n    postLink?: string,\r\n    accessibilityCaption?: string,\r\n  }>,\r\n  account: string,\r\n  classes: { [$Keys<$Call<typeof styles>>]: string },\r\n  status: 'completed' | 'loading' | 'failed',\r\n};\r\n\r\nconst InstaGrid = ({ classes, media, account, status}: Props) => {\r\n  return (\r\n    <Grid container spacing={4} className={classes.wrapper}>\r\n      {media &&\r\n        status === 'completed' &&\r\n        media.map(({ displayImage, id, postLink, accessibilityCaption }) => (\r\n          <Grid item xs={12} sm={6} md={4} key={id || displayImage}>\r\n            <ButtonBase\r\n              href={postLink || `https://www.instagram.com/${account}/`}\r\n            >\r\n              <img\r\n                src={displayImage}\r\n                alt={accessibilityCaption || 'Instagram picture'}\r\n                className={classes.image}\r\n              />\r\n            </ButtonBase>\r\n          </Grid>\r\n        ))}\r\n      {status === 'loading' && <p>loading...</p>}\r\n      {status === 'failed' && <p>Check instagram here</p>}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nInstaGrid.defaultProps = {\r\n  media: undefined,\r\n};\r\n\r\nexport default compose(\r\n  withInstagramFeed,\r\n  withStyles(styles),\r\n)(InstaGrid);","import React from 'react';\r\nimport './MainContent.css';\r\nimport InstaGrid from './InstaGrid';\r\n\r\nfunction MainContent() {\r\n  return (\r\n      <main>\r\n        <h1>\r\n          Flower follower\r\n        </h1>\r\n        <p>I have recently discovered that I have a flair for nature photography.  My best pieces go up to my Intagram account but you can always find my latest twelve images here.  I wanted to combine my new passion for photography with my current passion for UI development, so welcome to my React app Instagram feed.</p>\r\n        <InstaGrid account=\"jcooke1986\" numberOfMediaElements={12} />\r\n      </main>\r\n  );\r\n}\r\n\r\nexport default MainContent;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n      <footer>\r\n        <div>\r\n            <a\r\n              href=\"https://www.instagram.com/jcooke1986/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Instagram\r\n            </a>\r\n            <a\r\n              href=\"https://github.com/jcooke1986uk\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n                Github\r\n            </a>\r\n            <a \r\n              href=\"https://www.linkedin.com/in/jenny-cooke-6ba13058/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              LinkedIn\r\n            </a>\r\n          </div>\r\n          <div>\r\n            <a \r\n                href=\"https://github.com/OrigenStudio/react-instagram-feed\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"origen\"\r\n              >\r\n                Origen react instagram feed\r\n              </a>\r\n          </div>\r\n      </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport MainContent from './MainContent';\r\nimport Footer from './Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Header/>\r\n\r\n      <MainContent/>\r\n\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}