{"version":3,"sources":["Header.js","InstaGrid.js","MainContent.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","target","rel","InstaGrid","_ref","classes","media","account","status","react","Grid","container","spacing","wrapper","map","_ref2","displayImage","id","postLink","accessibilityCaption","item","xs","sm","md","key","ButtonBase","concat","src","alt","image","defaultProps","undefined","compose","withInstagramFeed","withStyles","width","height","MainContent","src_InstaGrid","numberOfMediaElements","Footer","App","src_Header","src_MainContent","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAwCeA,MArCf,WACE,OACIC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAb,oBAEFH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KACEE,KAAK,wCACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,UAJZ,aAQAH,EAAAC,EAAAC,cAAA,KACEE,KAAK,kCACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,UAJZ,UAQAH,EAAAC,EAAAC,cAAA,KACEE,KAAK,oDACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,UAJZ,kFCEJI,EAAY,SAAAC,GAA+C,IAA5CC,EAA4CD,EAA5CC,QAASC,EAAmCF,EAAnCE,MAAOC,EAA4BH,EAA5BG,QAASC,EAAmBJ,EAAnBI,OAC5C,OACEC,EAAA,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGb,UAAWM,EAAQQ,SAC5CP,GACY,cAAXE,GACAF,EAAMQ,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,aAAcC,EAAjBF,EAAiBE,GAAIC,EAArBH,EAAqBG,SAAUC,EAA/BJ,EAA+BI,qBAA/B,OACRV,EAAA,cAACC,EAAA,EAAD,CAAMU,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,IAAKP,GAAMD,GAC1CP,EAAA,cAACgB,EAAA,EAAD,CACEzB,KAAMkB,GAAQ,6BAAAQ,OAAiCnB,EAAjC,MAEdE,EAAA,qBACEkB,IAAKX,EACLY,IAAKT,GAAwB,oBAC7BpB,UAAWM,EAAQwB,YAKjB,YAAXrB,GAAwBC,EAAA,qCACb,WAAXD,GAAuBC,EAAA,iDAK9BN,EAAU2B,aAAe,CACvBxB,WAAOyB,GAGMC,UACbC,IACAC,YAlDa,iBAAO,CACpBrB,QAAS,GACTgB,MAAO,CACLM,MAAO,OACPC,OAAQ,WA4CGJ,CAGb7B,GC5CakC,MAZf,WACE,OACIzC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,6BAGAF,EAAAC,EAAAC,cAAA,iUACAF,EAAAC,EAAAC,cAACwC,EAAD,CAAW/B,QAAQ,aAAagC,sBAAuB,cCgChDC,MAxCf,WACE,OACI5C,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KACEE,KAAK,wCACLC,OAAO,SACPC,IAAI,uBAHN,aAOAN,EAAAC,EAAAC,cAAA,KACEE,KAAK,kCACLC,OAAO,SACPC,IAAI,uBAHN,UAOAN,EAAAC,EAAAC,cAAA,KACEE,KAAK,oDACLC,OAAO,SACPC,IAAI,uBAHN,aAQFN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KACIE,KAAK,uDACLC,OAAO,SACPC,IAAI,sBACJH,UAAU,UAJd,kCCbG0C,MAZf,WACE,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAC4C,EAAD,MAEA9C,EAAAC,EAAAC,cAAC6C,EAAD,MAEA/C,EAAAC,EAAAC,cAAC8C,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dbd45257.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n  return (\n      <header>\n        <div>\n          <p className=\"name\">Jenny Cooke</p>\n          <p className=\"tagline\">Styling the web</p>\n        </div>\n        <div>\n          <a\n            href=\"https://www.instagram.com/jcooke1986/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"button\"\n          >\n            Instagram\n          </a>\n          <a\n            href=\"https://github.com/jcooke1986uk\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"button\"\n          >\n              Github\n          </a>\n          <a \n            href=\"https://www.linkedin.com/in/jenny-cooke-6ba13058/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"button\"\n          >\n            LinkedIn\n          </a>\n        </div>\n      </header>\n  );\n}\n\nexport default Header;\n","// @flow\n\nimport * as React from 'react';\nimport withInstagramFeed from 'origen-react-instagram-feed';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport compose from 'recompose/compose';\n\nconst styles = () => ({\n  wrapper: {},\n  image: {\n    width: '100%',\n    height: '100%',\n  },\n});\n\nexport type Props = {\n  media?: Array<{\n    displayImage: string,\n    id?: string,\n    postLink?: string,\n    accessibilityCaption?: string,\n  }>,\n  account: string,\n  classes: { [$Keys<$Call<typeof styles>>]: string },\n  status: 'completed' | 'loading' | 'failed',\n};\n\nconst InstaGrid = ({ classes, media, account, status}: Props) => {\n  return (\n    <Grid container spacing={4} className={classes.wrapper}>\n      {media &&\n        status === 'completed' &&\n        media.map(({ displayImage, id, postLink, accessibilityCaption }) => (\n          <Grid item xs={12} sm={6} md={4} key={id || displayImage}>\n            <ButtonBase\n              href={postLink || `https://www.instagram.com/${account}/`}\n            >\n              <img\n                src={displayImage}\n                alt={accessibilityCaption || 'Instagram picture'}\n                className={classes.image}\n              />\n            </ButtonBase>\n          </Grid>\n        ))}\n      {status === 'loading' && <p>loading...</p>}\n      {status === 'failed' && <p>Check instagram here</p>}\n    </Grid>\n  );\n};\n\nInstaGrid.defaultProps = {\n  media: undefined,\n};\n\nexport default compose(\n  withInstagramFeed,\n  withStyles(styles),\n)(InstaGrid);","import React from 'react';\nimport './MainContent.css';\nimport InstaGrid from './InstaGrid';\n\nfunction MainContent() {\n  return (\n      <main>\n        <h1>\n          Flower follower\n        </h1>\n        <p>I have recently discovered that I have a flair for nature photography.  My best pieces go up to my Intagram account but you can always find my latest twelve images here.  I wanted to combine my new passion for photography with my current passion for UI development, so welcome to my React app Instagram feed.</p>\n        <InstaGrid account=\"jcooke1986\" numberOfMediaElements={12} />\n      </main>\n  );\n}\n\nexport default MainContent;\n","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n  return (\n      <footer>\n        <div>\n            <a\n              href=\"https://www.instagram.com/jcooke1986/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Instagram\n            </a>\n            <a\n              href=\"https://github.com/jcooke1986uk\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n                Github\n            </a>\n            <a \n              href=\"https://www.linkedin.com/in/jenny-cooke-6ba13058/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              LinkedIn\n            </a>\n          </div>\n          <div>\n            <a \n                href=\"https://github.com/OrigenStudio/react-instagram-feed\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"origen\"\n              >\n                Origen react instagram feed\n              </a>\n          </div>\n      </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport Header from './Header';\nimport MainContent from './MainContent';\nimport Footer from './Footer';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Header/>\n\n      <MainContent/>\n\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}